<?php

namespace App;


use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

use Illuminate\Support\Facades\DB;
use MathPHP\Finance;

class Solicitud extends Model
{
    use SoftDeletes;
    protected $table = 'solicitudes';
    protected $fillable = [
        'estatus_id','precio_sistema','monto_financiar','plazo_financiar','enganche','contacto_instaladora','capacidad_sistema','interes_anual','porcentaje_iva','descuento_opcion_compra','porcentaje_pago_valor_residual','escalador','comision_por_apertura','porcentaje_comision_por_apertura','costo_anual_seguro','pago_inicial','deuda_mensual','fico','plan_id','aplica_costo_anual_seguro','integrador_id','precio_lista','merchant_fee'
    ];

    public function cliente(){
        return $this->belongsTo(Cliente::class);
    }

    public function estatus(){
        return $this->belongsTo(SolicitudesEstatus::class,'estatus_id');
    }

    public function giro(){
        return $this->belongsTo(GiroComercial::class);
    }

    public function plan(){
        return $this->belongsTo(Plan::class,'plan_id');
    }

    public function razon_social(){
        return $this->belongsTo(RazonSocial::class,'razon_social_id');
    }

    public function integrador(){
        return $this->belongsTo(Integrador::class,'integrador_id');
    }

    public function scopeEstatus($query,$estatus_id){
        if (!empty($estatus_id)){
            $query->where('estatus_id',$estatus_id);
        }
    }

    public function scopeFecha($query,$fecha){
        if (!empty($fecha)){
            $query->whereDate('created_at','=',DB::raw("DATE('". $fecha."')"));
        }
    }

    public function scopeNombreCliente($query,$nombre_cliente){
        if (!empty($nombre_cliente)) {
            $query->whereHas('cliente', function ($q) use ($nombre_cliente) {
                    $q->where('nombre','like','%'.$nombre_cliente. '%')
                    ->orWhere('apellido_paterno','like','%'.$nombre_cliente. '%')
                    ->orWhere('apellido_paterno','like','%'.$nombre_cliente. '%');
            });
        }
    }



    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::deleted(function ($solicitud){
            #dd( $solicitud->cliente->user );
            $solicitud->cliente->user()->delete();
            $solicitud->cliente()->delete();
        });
    }

    #//plan_id solo sirve para cuando se crea una nueva solicitud
    public static function periodosCotizacion($precio_sistema = 0, $enganche = 0, $periodos = 0, $solicitud = null,$formato_fecha = false,$plan_id = null){
        $meses = $periodos;
        $monto_financiar = $precio_sistema - $enganche;
        $anios = intdiv($meses,12);
        $periodos = [];
        $suma_amortizaciones = 0;

        #dd($plan_id);


        #//Si solicitud_id es null, es una nueva solicitud y tomamos los valores de tabla configuraciones, caso contrario, directo de la solicitud
        if (is_null($solicitud)){
            $configuracion = Configuracion::find(1);

            if(!is_null($plan_id)){
                $plan = Plan::find($plan_id);
                $interes_anual = $plan->interes_anual / 100;
            }else{
                $interes_anual = $configuracion->interes_anual / 100;
            }

            $interes_mensual = $interes_anual / 12;
            $iva = $configuracion->iva / 100;
            $descuento_opcion_compra = $configuracion->descuento_opcion_compra / 100;
            $porcentaje_pago_valor_residual = $configuracion->porcentaje_pago_valor_residual / 100;

            #//Calculamos dia de pago de primer mensualidad
            $fecha_creacion = date('Y-m-d');
            $fecha_inicio = strtotime('+30 day',strtotime($fecha_creacion));
            $fecha_inicio = date('Y-m-d',$fecha_inicio);

            #//Revisamos que el día del pago no sea despues del día 28
            if( date('d',strtotime($fecha_inicio)) > 28 ){
                $fecha_inicio = date('Y-m-28',strtotime($fecha_inicio));
            }

            $fecha_pago = $fecha_inicio;
        }
        else{
            #//Valores del config en el momento que se creo la solicitud.
            #//No los leemos de la tabla porque talvez cambiaron los valores

            if($plan_id != null){
                #//Buscamos el plan
                $plan = Plan::find($plan_id);
                $interes_anual = $plan->interes_anual / 100;
            }else{
                $interes_anual = $solicitud->interes_anual / 100;
            }


            $interes_mensual = $interes_anual / 12;
            $iva = $solicitud->porcentaje_iva / 100;
            $descuento_opcion_compra = $solicitud->descuento_opcion_compra / 100;
            $porcentaje_pago_valor_residual = $solicitud->porcentaje_pago_valor_residual / 100;

            if(!is_null($solicitud->primer_fecha_vencimiento)){
                $fecha_pago = $solicitud->primer_fecha_vencimiento;
            }else{
                #//Calculamos dia de pago de primer mensualidad
                #//30 dias despues de la fecha de creacion
                $fecha_creacion = date('Y-m-d',strtotime($solicitud->created_at));
                $fecha_inicio = strtotime('+30 day',strtotime($fecha_creacion));
                $fecha_inicio = date('Y-m-d',$fecha_inicio);

                #//Revisamos que el día del pago no sea despues del día 28
                if( date('d',strtotime($fecha_inicio)) > 28 ){
                    $fecha_inicio = date('Y-m-28',strtotime($fecha_inicio));
                }
                $fecha_pago = $fecha_inicio;
            }

        }

        $periodo = 1;

        $suma_amortizaciones = 0;
        for($i=1; $i <= $meses; $i++){
            $pago_mensual_a_capital = Finance::ppmt($interes_mensual,$i,$meses,-$monto_financiar);
            $periodos[ $periodo ]['pago_mensual_a_capital'] = $pago_mensual_a_capital;

            $periodos[ $periodo ]['pago_valor_residual'] = 0;
            if ($periodo == $meses){
                $periodos[ $periodo ]['pago_valor_residual'] = $monto_financiar * $porcentaje_pago_valor_residual;
            }

            $periodos[ $periodo ]['fecha_pago'] = $fecha_pago;
            $nueva_fecha_pago = date("Y-m-d",strtotime("+1 month",strtotime($fecha_pago)));
            $fecha_pago = $nueva_fecha_pago;

            $pago_mensual_a_interes = Finance::ipmt($interes_mensual,$i,$meses,-$monto_financiar);
            $periodos[ $periodo ]['pago_mensual_a_interes'] = $pago_mensual_a_interes;

            $periodos[ $periodo ]['pago_mensual_IVA_interes'] = $pago_mensual_a_interes * .16;

            $subtotal = $pago_mensual_a_capital + $pago_mensual_a_interes + ($pago_mensual_a_interes * .16);
            $periodos[ $periodo ]['subtotal'] = $subtotal;

            #//Aplicamos condiciones del excel de muestra
            if ($i == 1){
                #//Calculamos el precio de compra
                $precio_opcion_compra = $monto_financiar * (1 - $descuento_opcion_compra);
                $periodos[ $periodo ]['precio_opcion_compra'] = $precio_opcion_compra;
            }else{
                #//Precio de compra es el mismo del periodo anterior
                if ($i % 12 == 0){
                    #//nuevo año, se calcula nuevo valor
                    $precio_opcion_compra = $periodos[ ($periodo - 1) ]['precio_opcion_compra'] * (1 - $descuento_opcion_compra);
                    #$precio_opcion_compra = $monto_financiar * (1 - $descuento_opcion_compra);
                    $periodos[ $periodo ]['precio_opcion_compra'] = $precio_opcion_compra;
                }else{
                    #//Toma el valor del periodo anterior
                    $periodos[ $periodo ]['precio_opcion_compra'] = $periodos[ ($i - 1)]['precio_opcion_compra'];
                }
            }

            $suma_amortizaciones += $periodos[ $periodo ]['subtotal'];
            $periodo++;
        }

        $periodos['suma_amortizaciones'] = $suma_amortizaciones;
        return $periodos;
    }


//
//    public static function periodosCotizacion($precio_sistema = 0, $enganche = 0, $periodos = 0, $solicitud = null,$formato_fecha = false){
//        $meses = $periodos;
//        $monto_financiar = $precio_sistema - $enganche;
//        $anios = intdiv($meses,12);
//        $periodos = [];
//        $suma_amortizaciones = 0;
//
//
//        #//Si solicitud_id es null, es una nueva solicitud y tomamos los valores de tabla configuraciones, caso contrario, directo de la solicitud
//        if (is_null($solicitud)){
//            $configuracion = Configuracion::find(1);
//
//            $interes_anual = $configuracion->interes_anual / 100;
//            $iva = $configuracion->iva / 100;
//            $descuento_opcion_compra = $configuracion->descuento_opcion_compra / 100;
//            $porcentaje_pago_valor_residual = $configuracion->porcentaje_pago_valor_residual / 100;
//
//            #considerar escalador, aplica solo en el primer perdiodo de pago de un nuevo año
//            $escalador = $configuracion->escalador / 100;
//        }else{
//            #//Valores del config en el momento que se creo la solicitud.
//            #//No los leemos de la tabla porque talvez cambiaron los valores
//            $interes_anual = $solicitud->interes_anual / 100;
//            $iva = $solicitud->porcentaje_iva / 100;
//            $descuento_opcion_compra = $solicitud->descuento_opcion_compra / 100;
//            $porcentaje_pago_valor_residual = $solicitud->porcentaje_pago_valor_residual / 100;
//
//            #considerar escalador, aplica solo en el primer perdiodo de pago de un nuevo año
//            $escalador = $solicitud->escalador / 100;
//        }
//
//
//        $periodo = 1;
//        $fecha_pago = date('Y-m-d');
//        for ($i=1; $i <= $anios; $i++){
//            for ($j = 1; $j <= 12; $j++){
//                #//PPMT aplica para todos los periodos en general
//                $pago_mensual_a_capital = (Finance::ppmt($interes_anual,$i,$anios,-$monto_financiar))/12;
//                $periodos[ $periodo ]['pago_mensual_a_capital'] = $pago_mensual_a_capital;
//                $periodos[ $periodo ]['pago_valor_residual'] = 0; #//0 en todos los periodos menos en el ultimo, si llega a ser el caso.
//
//                $periodos[ $periodo ]['fecha_pago'] = $fecha_pago;
//                if ($formato_fecha){
//                    $periodos[ $periodo ]['fecha_pago'] = \Carbon\Carbon::parse( $fecha_pago )->formatLocalized('%d/%B/%Y');
//                }
//                $nueva_fecha_pago = date("Y-m-d",strtotime("+1 month",strtotime($fecha_pago)));
//                $fecha_pago = $nueva_fecha_pago;
//
//
//                $pago_mensual_a_interes = 0;
//                $precio_opcion_compra = 0;
//                if($i == 1)
//                {
//                    #//Primer año del financiamiento
//                    #//No aplica escaladores
//                    $pago_mensual_a_interes = ($monto_financiar * $interes_anual)/12;
//                    $periodos[ $periodo ]['pago_mensual_a_interes'] = $pago_mensual_a_interes;
//
//                    $pago_mensual_IVA_interes = $pago_mensual_a_interes * $iva;
//                    $periodos[ $periodo ]['pago_mensual_IVA_interes'] = $pago_mensual_IVA_interes;
//
//                    $subtotal =$pago_mensual_a_capital + $pago_mensual_a_interes + $pago_mensual_IVA_interes;
//                    $periodos[ $periodo ]['subtotal'] = $subtotal;
//                }
//                else{
//                    #//Apartir del segundo año revisamos si tiene establecidos escaladores
//                    #//El subtotal va a ser igual a el subtotal del periodo anterior, en dado caso que no sea el primer periodo del año
//                    $subtotal = $periodos[ ($periodo - 1) ]['subtotal'];
//                    if ($j == 1){
//                        #//Si es el primero periodo de un nuevo año, calculamos el subtotal contemplando el escalador
//                        $subtotal = floatval($periodos[ ($periodo - 1) ]['subtotal']) * (1+$escalador);
//                    }
//                    $periodos[ $periodo ]['subtotal'] = $subtotal;
//
//                    $pago_mensual_a_interes = ($subtotal - $pago_mensual_a_capital) / (1 + $iva);
//                    $periodos[ $periodo ]['pago_mensual_a_interes'] = $pago_mensual_a_interes;
//
//                    $pago_mensual_IVA_interes = $pago_mensual_a_interes * $iva;
//                    $periodos[ $periodo ]['pago_mensual_IVA_interes'] = $pago_mensual_IVA_interes;
//
//                    #//Ultimo periodo del ultimo año
//                    if ($i == $anios && $j == 12){
//                        $periodos[ $periodo ]['pago_valor_residual'] = $monto_financiar * $porcentaje_pago_valor_residual;
//                    }
//                }
//
//                #//Calculamos el precio opcion a compra
//                if ($periodo == 1)
//                {
//                    #//En el primer periodo aplica directo sobre el monto a financiar.
//                    $precio_opcion_compra = $monto_financiar * (1 - $descuento_opcion_compra);
//                    $periodos[ $periodo ]['precio_opcion_compra'] = $precio_opcion_compra;
//                }
//                else{
//                    #//Aplicamos condiciones del excel de muestra
//                    if ($periodo % 12 == 0){
//                        #//Calculamos el precio de compra
//                        $precio_opcion_compra = $periodos[ ($periodo - 1) ]['precio_opcion_compra'] * (1 - $descuento_opcion_compra);
//                        $periodos[ $periodo ]['precio_opcion_compra'] = $precio_opcion_compra;
//                    }else{
//                        #//Precio de compra es el mismo del periodo anterior
//                        $precio_opcion_compra = $periodos[ ($periodo - 1) ]['precio_opcion_compra'];
//                        $periodos[ $periodo ]['precio_opcion_compra'] = $precio_opcion_compra;
//                    }
//                }
//
//                $suma_amortizaciones += $periodos[ $periodo ]['subtotal'];
//                $periodo++;
//            }
//
//        }
//        $periodos['suma_amortizaciones'] = $suma_amortizaciones;
//        return $periodos;
//    }



}
